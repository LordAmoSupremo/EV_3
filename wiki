Acerca de: se trata de un programa el cual esta conectado a una base de datos en mysql, con el objetivo de tener una mejor organizacion en una clinica, agregando pacientes (por nombre, apellido, edad, peso y estatura),
doctores (por nombre, apellido y especialidad) y crear citas (solicitando ID de paciente, ID de doctor, fecha, hora y motivo) ,además de poder consultar los que  se han agregado con anterioridad. Tanto a pacientes, doctores y citas creadas se les asigna 
un ID de forma automatica, siendo este la llave primaria de cada tabla. 

incluir el diagrama de flujo en la entrega uno (documento adjunto en el GitHub), además de describir cada una de las clases incluidas, su
propósito y descripción de sus métodos y variables.
clase main:
Propósito: La clase Main proporciona la funcionalidad principal de la aplicación, incluyendo la autenticación de usuarios, la gestión de pacientes, doctores y citas, así como la interacción con la base de datos.
Métodos:
main(String[] args): Este método es el punto de entrada de la aplicación. Se encarga de establecer la conexión con la base de datos, autenticar al usuario, y ejecutar el menú interactivo.
autenticarUsuario(Connection con, String nombreUsuario, String contrasena): Este método verifica las credenciales del usuario en la base de datos para permitir el acceso al sistema.
ejecutarMenu(Connection bd, Scanner scanner): Este método muestra el menú principal y gestiona las opciones seleccionadas por el usuario.
Métodos para gestionar pacientes (menuPacientes, agregarPaciente, eliminarPaciente), doctores (menuDoctores, agregarDoctor, eliminarDoctor), y citas (menuCitas, agendarNuevaCita, eliminarCita).
Variables:
Conectar_bd(String bd): Método para establecer la conexión con la base de datos.
Desconexion(Connection con): Método para cerrar la conexión con la base de datos.
scanner: Objeto Scanner para leer la entrada del usuario.
Variables locales en los métodos para almacenar datos ingresados por el usuario y resultados de consultas a la base de datos.


clase pacientes:
Define una clase Paciente con tres métodos estáticos para realizar operaciones CRUD sobre una tabla paciente en una base de datos.

Métodos:

deletePaciente(Connection con, int ID_paciente):

Elimina un paciente de la base de datos por su ID.
Toma dos argumentos:
con: Conexión a la base de datos.
ID_paciente: Identificador del paciente a eliminar.
Construye una sentencia SQL DELETE para eliminar el paciente con el ID especificado.
Ejecuta la sentencia y verifica el número de filas afectadas.
Imprime un mensaje de confirmación o error según el resultado.
Maneja la excepción SQLException y la relanza como una excepción RuntimeException con un mensaje informativo.
insertarPaciente(Connection con, String nombre, String apellido, int edad, int altura, int peso):

Inserta un nuevo paciente en la base de datos.
Toma seis argumentos:
con: Conexión a la base de datos.
nombre, apellido: Nombre y apellido del paciente.
edad, altura, peso: Edad, altura y peso del paciente.
Construye una sentencia SQL INSERT para insertar los datos del paciente en la tabla.
Ejecuta la sentencia y verifica el número de filas afectadas.
Imprime un mensaje de confirmación o error según el resultado.
Maneja la excepción SQLException y la relanza como una excepción RuntimeException con un mensaje informativo.
consultarPacientes(Connection con):

Consulta y muestra la información de todos los pacientes en la base de datos.
Toma un argumento:
con: Conexión a la base de datos.
Construye una sentencia SQL SELECT para obtener todos los datos de la tabla paciente.
Ejecuta la sentencia y recorre el conjunto de resultados.
Para cada fila, extrae los valores de las columnas y los imprime.
Maneja la excepción SQLException y la relanza como una excepción RuntimeException con un mensaje informativo.


clase doctor:
Propósito:
La clase Doctor proporciona métodos para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en la tabla de doctores de una base de datos. Estos métodos permiten agregar nuevos doctores, 
eliminar doctores existentes y consultar la información de todos los doctores almacenados en la base de datos.

Métodos:
deleteDoctor(Connection con, int ID_doctor): Este método elimina un doctor de la base de datos según su ID. Toma como argumentos una conexión a la base de datos y el ID del doctor a eliminar.
insertarDoctor(Connection con, String nombre, String apellido, String especialidad): Este método inserta un nuevo doctor en la base de datos. Toma como argumentos una conexión a la base de datos y 
los datos del doctor a insertar: nombre, apellido y especialidad.
consultarDoctores(Connection con): Este método consulta y muestra la información de todos los doctores almacenados en la base de datos. Toma como argumento una conexión a la base de datos.
Variables:
La clase Doctor no tiene variables de instancia, solo utiliza variables locales en cada método para almacenar los datos necesarios para interactuar con la base de datos. Las variables utilizadas en cada método son las siguientes:
con: conexión a la base de datos
ID_doctor: ID del doctor a eliminar
nombre, apellido, especialidad: datos del doctor a insertar
sql: sentencia SQL para realizar las operaciones CRUD
stmt: declaración de la sentencia SQL
result: resultado de la ejecución de la sentencia SQL
rs: resultado de la consulta a la base de datos


clase agendar citas: 
Propósito:
La clase Agendar_citas proporciona métodos para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en la tabla de citas agendadas de una base de datos. Estos métodos permiten agregar nuevas citas, eliminar citas existentes y consultar la información de todas las citas agendadas almacenadas en la base de datos.

Métodos:

deleteCita(Connection con, int ID_cita): Este método elimina una cita agendada de la base de datos según su ID. Toma como argumentos una conexión a la base de datos y el ID de la cita a eliminar.
insertarCita(Connection con, int ID_paciente, String fecha, String hora, int ID_doctor, String motivo): Este método agenda una nueva cita en la base de datos. Toma como argumentos una conexión a la base de datos y los datos de la cita a agendar: ID del paciente, fecha, hora, ID del doctor y motivo.
consultarCitas(Connection con): Este método consulta y muestra la información de todas las citas agendadas almacenadas en la base de datos. Toma como argumento una conexión a la base de datos.
Variables:
La clase Agendar_citas no tiene variables de instancia, solo utiliza variables locales en cada método para almacenar los datos necesarios para interactuar con la base de datos. Las variables utilizadas en cada método son las siguientes:

con: conexión a la base de datos
ID_cita: ID de la cita a eliminar
ID_paciente, fecha, hora, ID_doctor, motivo: datos de la cita a agendar
sql: sentencia SQL para realizar las operaciones CRUD
stmt: declaración de la sentencia SQL
result: resultado de la ejecución de la sentencia SQL
rs: resultado de la consulta a la base de datos
• Guías: pasos para configurar, ejecutar el programa, y crear un JAR ejecutable desde el código almacenado en el
repositorio
